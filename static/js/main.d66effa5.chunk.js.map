{"version":3,"sources":["components/Score.js","components/Header.js","components/Button.js","components/Rules.js","components/Token.js","components/Table.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Score","score","useContext","ScoreContext","className","Header","Button","children","props","Rules","useState","visible","setVisible","handleToggleClick","src","alt","onClick","Token","name","item","playing","title","elements","Table","setScore","result","setResult","setPlaying","house","setHouse","choice","setChoice","handleClick","a","loadingHouse","housePicked","victory","Promise","resolve","reject","interval","setInterval","max","min","Math","floor","random","getHouse","setTimeout","clearInterval","Wrapper","createContext","App","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d66effa5.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { ScoreContext } from \"../App\";\r\nimport \"./score.css\";\r\n\r\nfunction Score() {\r\n  const { score } = useContext(ScoreContext);\r\n\r\n  return (\r\n    <div className=\"score\">\r\n      <small>score</small>\r\n      <p>{score}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\nimport Score from \"./Score\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"\">\r\n      <h1>\r\n        Rock <br />\r\n        Paper <br />\r\n        Scissors\r\n      </h1>\r\n      <Score />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\nfunction Button({ children, ...props }) {\r\n  return (\r\n    <div className=\"button\" {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./rules.css\";\r\n\r\nfunction Rules() {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const handleToggleClick = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  return (\r\n    <div className=\"rules\">\r\n      {visible && (\r\n        <div className=\"rules-overlay\">\r\n          <h2>Rules</h2>\r\n          <img src=\"./images/image-rules.svg\" alt=\"\" />\r\n          <img\r\n            onClick={handleToggleClick}\r\n            src=\"./images/icon-close.svg\"\r\n            className=\"close-overlay\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n      )}\r\n      <Button onClick={handleToggleClick}>Rules</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Rules;\r\n","import React from \"react\";\r\nimport \"./token.css\";\r\n\r\nfunction Token({ name, onClick, playing }) {\r\n  const item = !playing ? name : \"default\";\r\n  return (\r\n    <div className={`token ${!name ? item : name}`}>\r\n      <div className=\"token-box\">\r\n        <img\r\n          src={`./images/icon-${name}.svg`}\r\n          alt={item}\r\n          title={item}\r\n          onClick={() => onClick && onClick(name)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Token;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { ScoreContext } from \"../App\";\r\nimport Button from \"./Button\";\r\nimport \"./table.css\";\r\nimport Token from \"./Token\";\r\n\r\nconst elements = [\"paper\", \"scissors\", \"rock\"];\r\n\r\nfunction Table() {\r\n  const { score, setScore } = useContext(ScoreContext);\r\n  const [result, setResult] = useState(\"\");\r\n  const [playing, setPlaying] = useState(false);\r\n  const [house, setHouse] = useState(\"\");\r\n  const [choice, setChoice] = useState(\"\");\r\n\r\n  const handleClick = async (name) => {\r\n    // const choiceClicked = e.target.title;\r\n    setPlaying(!playing);\r\n    setChoice(name);\r\n    const housePicked = await loadingHouse();\r\n    const result = victory(name, housePicked);\r\n    setResult(result);\r\n    if (result === \"win\") {\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setPlaying(!playing);\r\n    setHouse(\"\");\r\n    setResult(\"\");\r\n  };\r\n\r\n  const getHouse = (max = 2, min = 0) => {\r\n    return elements[Math.floor(Math.random() * (max - min + 1)) + min];\r\n  };\r\n\r\n  const loadingHouse = () => {\r\n    return new Promise((resolve, reject) => {\r\n      let housePicked;\r\n      const interval = setInterval(() => {\r\n        housePicked = getHouse();\r\n        setHouse(housePicked);\r\n      }, 75);\r\n      setTimeout(() => {\r\n        clearInterval(interval);\r\n        resolve(housePicked);\r\n      }, 3000);\r\n    });\r\n  };\r\n\r\n  const victory = (name, housePicked) => {\r\n    if (name === housePicked) {\r\n      return \"draw\";\r\n    }\r\n    if (name === \"rock\") {\r\n      if (housePicked === \"scissors\") {\r\n        return \"win\";\r\n      }\r\n      if (housePicked === \"paper\") {\r\n        return \"lose\";\r\n      }\r\n    }\r\n    if (name === \"paper\") {\r\n      if (housePicked === \"rock\") {\r\n        return \"win\";\r\n      }\r\n      if (housePicked === \"scissors\") {\r\n        return \"lose\";\r\n      }\r\n    }\r\n    if (name === \"scissors\") {\r\n      if (housePicked === \"paper\") {\r\n        return \"win\";\r\n      }\r\n      if (housePicked === \"rock\") {\r\n        return \"lose\";\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      {!playing ? (\r\n        <>\r\n          <Token name=\"paper\" onClick={handleClick} />\r\n          <Token name=\"scissors\" onClick={handleClick} />\r\n          <Token name=\"rock\" onClick={handleClick} />\r\n          <span className=\"line\"></span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <div className=\"player-choice\">\r\n            <Token name={choice} />\r\n            <p>You picked</p>\r\n          </div>\r\n          <div className=\"house-choice\">\r\n            <Token name={house} playing={playing} />\r\n            <p>The house picked</p>\r\n          </div>\r\n          {result && (\r\n            <div className=\"results\">\r\n              <h2>You {result}!</h2>\r\n              <Button onClick={handleReset}>Play Again</Button>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nfunction Wrapper({ children }) {\r\n  return <div className=\"wrap\">{children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, { createContext, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Rules from \"./components/Rules\";\nimport Table from \"./components/Table\";\nimport Wrapper from \"./components/Wrapper\";\n\nexport const ScoreContext = createContext();\n\nfunction App() {\n  const [score, setScore] = useState(0);\n\n  return (\n    <ScoreContext.Provider\n      value={{\n        score,\n        setScore,\n      }}\n    >\n      <div className=\"App\">\n        <Wrapper>\n          <div className=\"app-content\">\n            <Header />\n            <Table />\n            <Rules />\n          </div>\n        </Wrapper>\n      </div>\n    </ScoreContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}